-- XGEN: Autogenerated File

library IEEE;
library work;
use IEEE.numeric_std.all;
use IEEE.std_logic_1164.all;
use ieee.std_logic_unsigned.all;
use work.HDPython_core.all;
use work.v_symbol_pack.all;


entity fir_basic is 
  port(
    clk :  in  std_logic := std_logic_ctr(0, 1);
    i_coeff_0 :  in  slv8 := std_logic_vector_ctr(0, 8);
    i_coeff_1 :  in  slv8 := std_logic_vector_ctr(0, 8);
    i_coeff_2 :  in  slv8 := std_logic_vector_ctr(0, 8);
    i_coeff_3 :  in  slv8 := std_logic_vector_ctr(0, 8);
    i_data :  in  slv8 := std_logic_vector_ctr(0, 8);
    i_rstb :  in  std_logic := std_logic_ctr(0, 1);
    o_data :  out  slv8 := std_logic_vector_ctr(0, 8)
  );
end entity;



architecture rtl of fir_basic is

--------------------------fir_basic-----------------
  signal local_data : signed8 := signed_ctr(0, 8); 
  signal p_data : signed8_a(0 to 4 - 1)  := (others => (others => '0'));
  signal r_add_st0 : signed17_a(0 to 2 - 1)  := (others => (others => '0'));
  signal r_add_st1 : signed18 := signed_ctr(0, 18); 
  signal r_coeff : signed8_a(0 to 4 - 1)  := (others => (others => '0'));
  signal r_mult : signed16_a(0 to 4 - 1)  := (others => (others => '0'));
-------------------------- end fir_basic-----------------

begin
  -- begin architecture
  
-----------------------------------
p_input : process(clk) is
  
  begin
  
  if rising_edge(clk) then
  
      if (to_bool(i_rstb) ) then 
        r_coeff <= (others => (others => '0'));
        
      end if;
    p_data <= local_data & p_data(0 to p_data'length - 2);
    r_coeff(0)  <=  signed(i_coeff_0);
    r_coeff(1)  <=  signed(i_coeff_1);
    r_coeff(2)  <=  signed(i_coeff_2);
    r_coeff(3)  <=  signed(i_coeff_3);
    
  end if;
  
  
  end process;
  
-----------------------------------
p_mult : process(clk) is
  
  begin
  
  if rising_edge(clk) then
  
      if (to_bool(i_rstb) ) then 
        r_mult <= (others => (others => '0'));
        
      end if;
    for i2 in 0 to r_mult'length -1 loop 
        r_mult(i2) <= p_data(i2) * r_coeff(i2);
      end loop;
    
  end if;
  
  
  end process;
  
-----------------------------------
p_add_st0 : process(clk) is
  
  begin
  
  if rising_edge(clk) then
  
      if (to_bool(i_rstb) ) then 
        r_add_st0 <= (others => (others => '0'));
        
      end if;
    for i3 in 0 to 2 -1 loop 
        r_add_st0(i3) <= resize_10(symbol => r_mult(2 * i3), newSize => 16 + 1) + resize_10(symbol => r_mult(2 * i3 + 1), newSize => 16 + 1);
      end loop;
    
  end if;
  
  
  end process;
  
-----------------------------------
p_add_st1 : process(clk) is
  
  begin
  
  if rising_edge(clk) then
  
      if (to_bool(i_rstb) ) then 
        r_add_st1 <= (others => '0');
        
      end if;
    r_add_st1 <= resize_10(symbol => r_add_st0(0), newSize => 16 + 2) + resize_10(symbol => r_add_st0(1), newSize => 16 + 2);
    
  end if;
  
  
  end process;
  
-----------------------------------
p_output : process(clk) is
  
  begin
  
  if rising_edge(clk) then
  
      if (to_bool(i_rstb) ) then 
        o_data <= (others => '0');
        
      end if;
    o_data  <=  std_logic_vector(r_add_st1(r_add_st1'length -1   downto  8));
    
  end if;
  
  
  end process;
  -- end architecture
local_data  <=  signed(i_data);
  
end architecture;