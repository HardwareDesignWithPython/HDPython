-- XGEN: Autogenerated File

library IEEE;
library work;
use IEEE.numeric_std.all;
use IEEE.std_logic_1164.all;
use ieee.std_logic_unsigned.all;
use work.HDPython_core.all;
use work.NativeFifoOutSlave_pack.all;
use work.NativeFifoOut_pack.all;
use work.small_buffer_pack.all;
use work.v_symbol_pack.all;


entity readout_native_fifo is 
  port(
    Data_in_s2m :  out  NativeFifoOut_s2m := NativeFifoOut_s2m_ctr;
    Data_in_m2s :  in  NativeFifoOut_m2s := NativeFifoOut_m2s_ctr;
    clk :  in  std_logic := std_logic_ctr(0, 1)
  );
end entity;



architecture rtl of readout_native_fifo is

--------------------------readout_native_fifo-----------------
  signal counter : slv32 := std_logic_vector_ctr(0, 32); 
  signal data : slv32 := std_logic_vector_ctr(0, 32); 
  signal   fifo_s_sig : NativeFifoOutSlave_sig := NativeFifoOutSlave_sig_ctr;
-------------------------- end readout_native_fifo-----------------

begin
  -- begin architecture
  
-----------------------------------
proc : process(clk, Data_in_m2s, fifo_s_sig) is
    variable   fifo_s : NativeFifoOutSlave1 := NativeFifoOutSlave1_ctr;
  
  begin
        pull( self_sig  =>  fifo_s_sig, self  =>  fifo_s, rx1 => Data_in_m2s);
  
  if rising_edge(clk) then
  
  counter <= counter + 1;
    
      if (to_bool(isReceivingData_0(self_sig => fifo_s_sig, self => fifo_s)) ) then 
        read_data_01(self_sig => fifo_s_sig, self => fifo_s, data => data);
        
      end if;
    
    exit_rising_edge(self_sig => fifo_s_sig, self => fifo_s);
  
  end if;
        push( self_sig  =>  fifo_s_sig, self  =>  fifo_s);
  
  
  end process;
  -- end architecture

end architecture;