-- XGEN: Autogenerated File

library IEEE;
library work;
use IEEE.numeric_std.all;
use IEEE.std_logic_1164.all;
use ieee.std_logic_unsigned.all;
use work.HDPython_core.all;
use work.NativeFifoOut_pack.all;
use work.small_buffer_pack.all;
use work.v_symbol_pack.all;


package NativeFifoOutSlave_pack is 

-------------------------------------------------------------------------
------- Start Psuedo Class NativeFifoOutSlave -------------------------

type NativeFifoOutSlave_sig is record 
    rx1 : NativeFifoOut;
end record;
    
    
  constant NativeFifoOutSlave_sig_null : NativeFifoOutSlave_sig:= (
    rx1 => NativeFifoOut_ctr
  );


    type NativeFifoOutSlave_sig_a is array (natural range <>) of NativeFifoOutSlave_sig;
        


type NativeFifoOutSlave1 is record 
    buff : small_buffer;
    empty1 : std_logic;
    enable1 : std_logic;
    rx : NativeFifoOut;
end record;
    
    
  constant NativeFifoOutSlave1_null : NativeFifoOutSlave1:= (
    buff => small_buffer_ctr,
    empty1 => std_logic_ctr(0, 1),
    enable1 => std_logic_ctr(0, 1),
    rx => NativeFifoOut_ctr
  );


    type NativeFifoOutSlave1_a is array (natural range <>) of NativeFifoOutSlave1;
        

  function NativeFifoOutSlave_sig_ctr  return NativeFifoOutSlave_sig;
  function NativeFifoOutSlave1_ctr  return NativeFifoOutSlave1;
  procedure pull (signal self_sig :  inout  NativeFifoOutSlave_sig;  self :  inout  NativeFifoOutSlave1;  signal rx1 :  in  NativeFifoOut_m2s);
-- empty procedure removed. name: 'push'
  procedure pull (signal self_sig :  inout  NativeFifoOutSlave_sig_a;  self :  inout  NativeFifoOutSlave1_a;  signal rx1 :  in  NativeFifoOut_m2s_a);
-- empty procedure removed. name: 'push'
  procedure enter_rising_edge (Signal self_sig :  inout  NativeFifoOutSlave_sig; self :  inout  NativeFifoOutSlave1);
  procedure exit_rising_edge (Signal self_sig :  inout  NativeFifoOutSlave_sig; self :  inout  NativeFifoOutSlave1);
  procedure read_data_01 (Signal self_sig :  inout  NativeFifoOutSlave_sig; self :  inout  NativeFifoOutSlave1; signal data :  out  std_logic_vector);
  function isReceivingData_0 (
   Signal self_sig : NativeFifoOutSlave_sig ;
    self : NativeFifoOutSlave1
 ) return boolean;
------- End Psuedo Class NativeFifoOutSlave -------------------------
-------------------------------------------------------------------------


end NativeFifoOutSlave_pack;


package body NativeFifoOutSlave_pack is

-------------------------------------------------------------------------
------- Start Psuedo Class NativeFifoOutSlave -------------------------
function NativeFifoOutSlave_sig_ctr  return NativeFifoOutSlave_sig is
    variable ret : NativeFifoOutSlave_sig := NativeFifoOutSlave_sig_null; 
  begin 
     return ret;
 
end function;

function NativeFifoOutSlave1_ctr  return NativeFifoOutSlave1 is
    variable ret : NativeFifoOutSlave1 := NativeFifoOutSlave1_null; 
  begin 
     return ret;
 
end function;

procedure pull (signal self_sig :  inout  NativeFifoOutSlave_sig;  self :  inout  NativeFifoOutSlave1;  signal rx1 :  in  NativeFifoOut_m2s) is
   
  begin 
     pull_11(self_sig.rx1, rx1);
 
end procedure;

-- empty procedure removed. name: 'push'
procedure pull (signal self_sig :  inout  NativeFifoOutSlave_sig_a;  self :  inout  NativeFifoOutSlave1_a;  signal rx1 :  in  NativeFifoOut_m2s_a) is
   
  begin 
 
        for i in 0 to self'length - 1 loop
        pull( self_sig =>  self_sig(i), self =>  self(i), rx1 => rx1(i));
        end loop;
             
end procedure;

-- empty procedure removed. name: 'push'
procedure enter_rising_edge (Signal self_sig :  inout  NativeFifoOutSlave_sig; self :  inout  NativeFifoOutSlave1) is
   
  begin 
 if (( to_bool(self.enable1)  and  not  ( to_bool(self.empty1)  ) ) ) then 
      set_value_00_lshift(self => self.buff, rhs => self.rx.data);
      
    end if;
  self.empty1 := self.rx.empty;
  self.enable1 := self.rx.enable;
  self.rx.enable := '0'; 
end procedure;

procedure exit_rising_edge (Signal self_sig :  inout  NativeFifoOutSlave_sig; self :  inout  NativeFifoOutSlave1) is
   
  begin 
 if ( not  ( to_bool(isReceivingData_0(self => self.buff))  ) ) then 
      self.rx.enable := '1';
      
    end if; 
end procedure;

function isReceivingData_0 (
   Signal self_sig : NativeFifoOutSlave_sig ;
    self : NativeFifoOutSlave1
 ) return boolean is
   
  begin 
 return isReceivingData_0(self => self.buff);
   
end function;

procedure read_data_01 (Signal self_sig :  inout  NativeFifoOutSlave_sig; self :  inout  NativeFifoOutSlave1; signal data :  out  std_logic_vector) is
   
  begin 
 data <= (others => '0');
  get_value_01_rshift(self => self.buff, rhs => data);
   
end procedure;

------- End Psuedo Class NativeFifoOutSlave -------------------------
  -------------------------------------------------------------------------


end NativeFifoOutSlave_pack;

