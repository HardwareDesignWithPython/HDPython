-- XGEN: Autogenerated File

library IEEE;
library work;
use IEEE.numeric_std.all;
use IEEE.std_logic_1164.all;
use ieee.std_logic_unsigned.all;
use work.HDPython_core.all;
use work.span_t2_pack.all;
use work.span_t_pack.all;
use work.test_Config_pack.all;
use work.v_symbol_pack.all;


entity data_record_tb is 
end entity;



architecture rtl of data_record_tb is

--------------------------data_record_tb-----------------
  signal after_range : std_logic := std_logic_ctr(0, 1); 
  signal   anotherSpan : span_t := span_t_ctr(start  =>  12, stop  =>  45);
  signal befor_range : std_logic := std_logic_ctr(0, 1); 
  signal   config1 : test_Config := test_Config_ctr;
  signal counter : slv8 := std_logic_vector_ctr(0, 8); 
  signal in_range : std_logic := std_logic_ctr(0, 1); 
--------------------------clkgen-----------------
  signal clkgen_clk : std_logic := std_logic_ctr(0, 1); 
-------------------------- end clkgen-----------------
-------------------------- end data_record_tb-----------------

begin
  -- begin architecture
  
-----------------------------------
proc : process(clkgen_clk) is
    variable   config2 : test_Config := test_Config_ctr;
  
  begin
  
  if rising_edge(clkgen_clk) then
  in_range <= '0';
    befor_range <= '0';
    after_range <= '0';
    counter <= counter + 1;
    config1.var1 <= config2.var1;
    config2.var2 := config1.var2;
    
      if (to_bool(isInRange_11(self => config1.var3, counter => counter)) ) then 
        in_range <= '1';
        
      end if;
    
      if (to_bool(isBeforeRange_11(self => config1.var4, counter => counter)) ) then 
        befor_range <= '1';
        
      end if;
    
      if (to_bool(isAfterRange_11(self => config1.var4, counter => counter)) ) then 
        after_range <= '1';
        
      end if;
    
      if (to_bool(isInRange_11(self => anotherSpan, counter => counter)) ) then 
        
      end if;
    
  end if;
  
  
  end process;
  -- end architecture

  clkgen : entity work.clk_generator port map (
    clk => clkgen_clk
  );
  
end architecture;