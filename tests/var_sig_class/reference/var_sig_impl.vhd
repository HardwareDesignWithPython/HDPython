-- XGEN: Autogenerated File

library IEEE;
library work;
use IEEE.numeric_std.all;
use IEEE.std_logic_1164.all;
use ieee.std_logic_unsigned.all;
use work.HDPython_core.all;
use work.Var_sig_class_pack.all;
use work.v_symbol_pack.all;


entity var_sig_impl is 
  port(
    clk :  in  std_logic := std_logic_ctr(0, 1)
  );
end entity;



architecture rtl of var_sig_impl is

--------------------------var_sig_impl-----------------
  signal data : slv32 := std_logic_vector_ctr(0, 32); 
  signal data_o : slv32 := std_logic_vector_ctr(0, 32); 
  signal   vs_clas_sig : Var_sig_class_sig := Var_sig_class_sig_ctr;
-------------------------- end var_sig_impl-----------------

begin
  -- begin architecture
  
-----------------------------------
proc : process(clk, data, data_o, vs_clas_sig) is
    variable   vs_clas : Var_sig_class1 := Var_sig_class1_ctr;
  
  begin
        pull( self_sig  =>  vs_clas_sig, self  =>  vs_clas, sTest4 => data);
  
  if rising_edge(clk) then
  
  vs_clas_sig.sTest3 <= data;
    vs_clas.vTest3 := data;
    f1_0(self_sig => vs_clas_sig, self => vs_clas);
    f2_01(self_sig => vs_clas_sig, self => vs_clas, x => data);
    data <= data + 1;
    
  
  end if;
        push( self_sig  =>  vs_clas_sig, self  =>  vs_clas);
  
  
  end process;
  -- end architecture
data_o <= vs_clas_sig.sTest5;
  
end architecture;