-- XGEN: Autogenerated File

library IEEE;
library work;
use IEEE.numeric_std.all;
use IEEE.std_logic_1164.all;
use ieee.std_logic_unsigned.all;
use work.HDPython_core.all;
use work.v_symbol_pack.all;


package Var_sig_class_pack is 

-------------------------------------------------------------------------
------- Start Psuedo Class Var_sig_class -------------------------

type Var_sig_class_sig is record 
    sTest1 : slv32;
    sTest2 : slv32;
    sTest3 : slv32;
    sTest4 : slv32;
    sTest5 : slv32;
end record;
    
    
  constant Var_sig_class_sig_null : Var_sig_class_sig:= (
    sTest1 => std_logic_vector_ctr(0, 32),
    sTest2 => std_logic_vector_ctr(0, 32),
    sTest3 => std_logic_vector_ctr(0, 32),
    sTest4 => std_logic_vector_ctr(0, 32),
    sTest5 => std_logic_vector_ctr(0, 32)
  );


    type Var_sig_class_sig_a is array (natural range <>) of Var_sig_class_sig;
        


type Var_sig_class1 is record 
    vTest1 : slv32;
    vTest2 : slv32;
    vTest3 : slv32;
end record;
    
    
  constant Var_sig_class1_null : Var_sig_class1:= (
    vTest1 => std_logic_vector_ctr(0, 32),
    vTest2 => std_logic_vector_ctr(0, 32),
    vTest3 => std_logic_vector_ctr(0, 32)
  );


    type Var_sig_class1_a is array (natural range <>) of Var_sig_class1;
        

  function Var_sig_class_sig_ctr  return Var_sig_class_sig;
  function Var_sig_class1_ctr  return Var_sig_class1;
  procedure pull (signal self_sig :  inout  Var_sig_class_sig;  self :  inout  Var_sig_class1;  sTest4 :  in  slv32);
-- empty procedure removed. name: 'push'
  procedure pull (signal self_sig :  inout  Var_sig_class_sig_a;  self :  inout  Var_sig_class1_a;  sTest4 :  in  slv32_a);
-- empty procedure removed. name: 'push'
-- empty procedure removed. name: 'enter_rising_edge'
-- empty procedure removed. name: 'exit_rising_edge'
  procedure f2_01 (Signal self_sig :  inout  Var_sig_class_sig; self :  inout  Var_sig_class1; signal x :  in  std_logic_vector);
  procedure f1_0 (Signal self_sig :  inout  Var_sig_class_sig; self :  inout  Var_sig_class1);
------- End Psuedo Class Var_sig_class -------------------------
-------------------------------------------------------------------------


end Var_sig_class_pack;


package body Var_sig_class_pack is

-------------------------------------------------------------------------
------- Start Psuedo Class Var_sig_class -------------------------
function Var_sig_class_sig_ctr  return Var_sig_class_sig is
    variable ret : Var_sig_class_sig := Var_sig_class_sig_null; 
  begin 
     return ret;
 
end function;

function Var_sig_class1_ctr  return Var_sig_class1 is
    variable ret : Var_sig_class1 := Var_sig_class1_null; 
  begin 
     return ret;
 
end function;

procedure pull (signal self_sig :  inout  Var_sig_class_sig;  self :  inout  Var_sig_class1;  sTest4 :  in  slv32) is
   
  begin 
     pull_11(self_sig.sTest4, sTest4);
 
end procedure;

-- empty procedure removed. name: 'push'
procedure pull (signal self_sig :  inout  Var_sig_class_sig_a;  self :  inout  Var_sig_class1_a;  sTest4 :  in  slv32_a) is
   
  begin 
 
        for i in 0 to self'length - 1 loop
        pull( self_sig =>  self_sig(i), self =>  self(i), sTest4 => sTest4(i));
        end loop;
             
end procedure;

-- empty procedure removed. name: 'push'
-- empty procedure removed. name: 'enter_rising_edge'
-- empty procedure removed. name: 'exit_rising_edge'
procedure f1_0 (Signal self_sig :  inout  Var_sig_class_sig; self :  inout  Var_sig_class1) is
   
  begin 
 self.vTest1  :=  std_logic_vector(to_unsigned(5, self.vTest1'length));
  self_sig.sTest1  <=  std_logic_vector(to_unsigned(4, self_sig.sTest1'length));
  self_sig.sTest5 <= self_sig.sTest5 + 1;
   
end procedure;

procedure f2_01 (Signal self_sig :  inout  Var_sig_class_sig; self :  inout  Var_sig_class1; signal x :  in  std_logic_vector) is
   
  begin 
 self.vTest2 := x;
  self_sig.sTest2 <= x;
   
end procedure;

------- End Psuedo Class Var_sig_class -------------------------
  -------------------------------------------------------------------------


end Var_sig_class_pack;

