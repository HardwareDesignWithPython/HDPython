-- XGEN: Autogenerated File

library IEEE;
library work;
use IEEE.numeric_std.all;
use IEEE.std_logic_1164.all;
use ieee.std_logic_unsigned.all;
use work.HDPython_core.all;
use work.v_symbol_pack.all;


package optional_t_pack is 

-------------------------------------------------------------------------
------- Start Psuedo Class optional_t -------------------------

type optional_t is record 
    data : slv32;
    valid : std_logic;
end record;
    
    
  constant optional_t_null : optional_t:= (
    data => std_logic_vector_ctr(0, 32),
    valid => std_logic_ctr(0, 1)
  );


    type optional_t_a is array (natural range <>) of optional_t;
        

  function optional_t_ctr  return optional_t;
  procedure pull_01 (self : inout optional_t; signal data_IO :  in  optional_t);
  procedure push_01 (self : inout optional_t; signal data_IO :  out  optional_t);
  procedure pull_11 (signal self : inout optional_t; signal data_IO :  in  optional_t);
  procedure push_11 (signal self : inout optional_t; signal data_IO :  out  optional_t);
  function to_bool (
   Signal self : optional_t
 ) return boolean;
  procedure set_inValid_1 (Signal self :  inout  optional_t);
  function is_valid_1 (
   Signal self : optional_t
 ) return boolean;
  procedure set_data_11 (Signal self :  inout  optional_t; signal data :  in  std_logic_vector);
------- End Psuedo Class optional_t -------------------------
-------------------------------------------------------------------------


end optional_t_pack;


package body optional_t_pack is

-------------------------------------------------------------------------
------- Start Psuedo Class optional_t -------------------------
function optional_t_ctr  return optional_t is
    variable ret : optional_t := optional_t_null; 
  begin 
     return ret;
 
end function;

procedure pull_01 (self : inout optional_t; signal data_IO :  in  optional_t) is
   
  begin 
 self   :=  data_IO; 
end procedure;

procedure push_01 (self : inout optional_t; signal data_IO :  out  optional_t) is
   
  begin 
 data_IO  <=  self; 
end procedure;

procedure pull_11 (signal self : inout optional_t; signal data_IO :  in  optional_t) is
   
  begin 
 self   <=  data_IO; 
end procedure;

procedure push_11 (signal self : inout optional_t; signal data_IO :  out  optional_t) is
   
  begin 
 data_IO  <=  self; 
end procedure;

procedure set_data_11 (Signal self :  inout  optional_t; signal data :  in  std_logic_vector) is
   
  begin 
 self.valid <= '1';
  self.data <= data;
   
end procedure;

function is_valid_1 (
   Signal self : optional_t
 ) return boolean is
   
  begin 
 return self.valid = '1';
   
end function;

procedure set_inValid_1 (Signal self :  inout  optional_t) is
   
  begin 
 self.valid <= '0';
   
end procedure;

function to_bool (
   Signal self : optional_t
 ) return boolean is
   
  begin 
 return is_valid_1(self => self);
   
end function;

------- End Psuedo Class optional_t -------------------------
  -------------------------------------------------------------------------


end optional_t_pack;

