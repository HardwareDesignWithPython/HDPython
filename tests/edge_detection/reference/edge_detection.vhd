-- XGEN: Autogenerated File

library IEEE;
library work;
use IEEE.numeric_std.all;
use IEEE.std_logic_1164.all;
use ieee.std_logic_unsigned.all;
use work.HDPython_core.all;
use work.optional_t_pack.all;
use work.v_symbol_pack.all;


entity edge_detection is 
  port(
    clk :  in  std_logic := std_logic_ctr(0, 1);
    ctime :  in  slv32 := std_logic_vector_ctr(0, 32);
    data :  in  slv32 := std_logic_vector_ctr(0, 32);
    data_out :  out  optional_t := optional_t_ctr
  );
end entity;



architecture rtl of edge_detection is

--------------------------edge_detection-----------------
  signal data_old : slv32 := std_logic_vector_ctr(0, 32); 
-------------------------- end edge_detection-----------------

begin
  -- begin architecture
  
-----------------------------------
proc : process(clk) is
  
  begin
  
  if rising_edge(clk) then
  
  data_out <= optional_t_ctr;
    
    if (( data >= 10 and data_old < 10) ) then 
    set_data_11(self => data_out, data => ctime);
    
    end if;
    
  
  end if;
  
  
  end process;
  -- end architecture

end architecture;