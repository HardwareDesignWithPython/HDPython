-- XGEN: Autogenerated File

library IEEE;
library work;
use IEEE.numeric_std.all;
use IEEE.std_logic_1164.all;
use ieee.std_logic_unsigned.all;
use work.HDPython_core.all;
use work.globals_t_pack.all;
use work.optional_trigger_bits_pack.all;
use work.registerT_pack.all;
use work.trigger_bits_buffer_t_pack.all;
use work.v_symbol_pack.all;


entity tb_edge_detection is 
  port(
    TriggerBits :  in  slv5_a(0 to 10) := (others => slv5_null);
    TriggerBits_out :  out  optional_trigger_bits := optional_trigger_bits_ctr;
    gSystem :  in  globals_t := globals_t_ctr
  );
end entity;



architecture rtl of tb_edge_detection is

--------------------------tb_edge_detection-----------------
  signal TriggerMask : slv10 := std_logic_vector_ctr(0, 10); 
  signal buff_sig : trigger_bits_buffer_t_sig_a(0 to 10 - 1)  := (others => trigger_bits_buffer_t_sig_null);
-------------------------- end tb_edge_detection-----------------

begin
  -- begin architecture
  
-----------------------------------
proc : process(gSystem.clk) is
  
  begin
  
  if rising_edge(gSystem.clk) then
  TriggerBits_out.valid <= '0';
    for i3 in 0 to buff'length -1 loop 
        TriggerBits_out.TriggerBits(i3) <= (others => '0');
        push_back_11(self_sig => buff_sig(i3), data_in => TriggerBits(i3));
        set_trigger_mask_11(self_sig => buff_sig(i3), trigger_mask => TriggerMask);
        
        if (to_bool(rising_edge_1(self_sig => buff_sig(i3))) ) then 
          TriggerBits_out.TriggerBits(i3) <= get_trigger_bits_1(self_sig => buff_sig(i3));
          TriggerBits_out.valid <= '1';
          
        end if;
      end loop;
    
  end if;
  
  
  end process;
  -- end architecture

end architecture;