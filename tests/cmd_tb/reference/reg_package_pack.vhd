-- XGEN: Autogenerated File

library IEEE;
library work;
use IEEE.numeric_std.all;
use IEEE.std_logic_1164.all;
use ieee.std_logic_unsigned.all;
use work.HDPython_core.all;
use work.v_symbol_pack.all;


package reg_package_pack is 

-------------------------------------------------------------------------
------- Start Psuedo Class reg_package -------------------------

type reg_package is record 
    isComplete : std_logic;
    key1 : slv32;
    key2 : slv32;
    key3 : slv32;
    key4 : slv32;
end record;
    
    
  constant reg_package_null : reg_package:= (
    isComplete => std_logic_ctr(0, 1),
    key1 => std_logic_vector_ctr(0, 32),
    key2 => std_logic_vector_ctr(0, 32),
    key3 => std_logic_vector_ctr(0, 32),
    key4 => std_logic_vector_ctr(0, 32)
  );


    type reg_package_a is array (natural range <>) of reg_package;
        

  function reg_package_ctr  return reg_package;
  procedure pull_01 (self : inout reg_package; signal data_IO :  in  reg_package);
  procedure push_01 (self : inout reg_package; signal data_IO :  out  reg_package);
  procedure pull_11 (signal self : inout reg_package; signal data_IO :  in  reg_package);
  procedure push_11 (signal self : inout reg_package; signal data_IO :  out  reg_package);
  procedure deserialize_000 (self :  inout  reg_package; buff :  in  std_logic_vector; counter :  in  std_logic_vector);
------- End Psuedo Class reg_package -------------------------
-------------------------------------------------------------------------


end reg_package_pack;


package body reg_package_pack is

-------------------------------------------------------------------------
------- Start Psuedo Class reg_package -------------------------
function reg_package_ctr  return reg_package is
    variable ret : reg_package := reg_package_null; 
  begin 
     return ret;
 
end function;

procedure pull_01 (self : inout reg_package; signal data_IO :  in  reg_package) is
   
  begin 
 self   :=  data_IO; 
end procedure;

procedure push_01 (self : inout reg_package; signal data_IO :  out  reg_package) is
   
  begin 
 data_IO  <=  self; 
end procedure;

procedure pull_11 (signal self : inout reg_package; signal data_IO :  in  reg_package) is
   
  begin 
 self   <=  data_IO; 
end procedure;

procedure push_11 (signal self : inout reg_package; signal data_IO :  out  reg_package) is
   
  begin 
 data_IO  <=  self; 
end procedure;

procedure deserialize_000 (self :  inout  reg_package; buff :  in  std_logic_vector; counter :  in  std_logic_vector) is
   
  begin 
 
    if (counter = 0) then 
      self.key1 := buff;
      
    elsif (counter = 1) then 
      self.key2 := buff;
      
    elsif (counter = 2) then 
      self.key3 := buff;
      
    elsif (counter = 3) then 
      self.key4 := buff;
      self.isComplete := '1';
      
  end if;
   
end procedure;

------- End Psuedo Class reg_package -------------------------
  -------------------------------------------------------------------------


end reg_package_pack;

