-- XGEN: Autogenerated File

library IEEE;
library work;
use IEEE.numeric_std.all;
use IEEE.std_logic_1164.all;
use ieee.std_logic_unsigned.all;
use work.HDPython_core.all;
use work.axisStream_slv32.all;
use work.reg_handle_pack.all;
use work.reg_package_pack.all;
use work.v_symbol_pack.all;


package register_handler_obj_pack is 

-------------------------------------------------------------------------
------- Start Psuedo Class register_handler_obj -------------------------

type register_handler_obj is record 
    Done : std_logic;
    counter : slv32;
    reg : reg_package;
    reg_ports : reg_handle;
end record;
    
    
  constant register_handler_obj_null : register_handler_obj:= (
    Done => std_logic_ctr(0, 1),
    counter => std_logic_vector_ctr(0, 32),
    reg => reg_package_ctr,
    reg_ports => reg_handle_ctr
  );


    type register_handler_obj_a is array (natural range <>) of register_handler_obj;
        

  function register_handler_obj_ctr  return register_handler_obj;
  procedure pull (signal clk : in std_logic;  self :  inout  register_handler_obj;  signal reg_ports :  in  reg_handle_s2m);
  procedure push (signal clk : in std_logic;  self :  inout  register_handler_obj;  signal reg_ports :  out  reg_handle_m2s);
  procedure pull (signal clk  : in std_logic; self :  inout  register_handler_obj_a;  signal reg_ports :  in  reg_handle_s2m_a);
  procedure push (signal clk  : in std_logic; self :  inout  register_handler_obj_a;  signal reg_ports :  out  reg_handle_m2s_a);
  procedure process_event_000 (self :  inout  register_handler_obj; ax_in :  inout  axiStream_slv32_slave; ax_out :  inout  axiStream_slv32_master);
  function isDone_0 (
   self : register_handler_obj
 ) return boolean;
  function isThisHeader_00 (
   self : register_handler_obj ;
    buff : std_logic_vector
 ) return boolean;
------- End Psuedo Class register_handler_obj -------------------------
-------------------------------------------------------------------------


end register_handler_obj_pack;


package body register_handler_obj_pack is

-------------------------------------------------------------------------
------- Start Psuedo Class register_handler_obj -------------------------
function register_handler_obj_ctr  return register_handler_obj is
    variable ret : register_handler_obj := register_handler_obj_null; 
  begin 
     return ret;
 
end function;

procedure pull (signal clk : in std_logic;  self :  inout  register_handler_obj;  signal reg_ports :  in  reg_handle_s2m) is
   
  begin 
 

-- Start Connecting
    pull_01(clk, self.reg_ports, reg_ports);

-- End Connecting

         
end procedure;

procedure push (signal clk : in std_logic;  self :  inout  register_handler_obj;  signal reg_ports :  out  reg_handle_m2s) is
   
  begin 
 

-- Start Connecting
    push_01(clk, self.reg_ports, reg_ports);

-- End Connecting

         
end procedure;

procedure pull (signal clk  : in std_logic; self :  inout  register_handler_obj_a;  signal reg_ports :  in  reg_handle_s2m_a) is
   
  begin 
 
        for i in 0 to self'length - 1 loop
        pull( clk => clk, self =>  self(i), reg_ports => reg_ports(i));
        end loop;
             
end procedure;

procedure push (signal clk  : in std_logic; self :  inout  register_handler_obj_a;  signal reg_ports :  out  reg_handle_m2s_a) is
   
  begin 
 
        for i in 0 to self'length - 1 loop
        push( clk => clk, self =>  self(i), reg_ports => reg_ports(i));
        end loop;
             
end procedure;

function isThisHeader_00 (
   self : register_handler_obj ;
    buff : std_logic_vector
 ) return boolean is
   
  begin 
 return buff = 305419896;
   
end function;

function isDone_0 (
   self : register_handler_obj
 ) return boolean is
   
  begin 
 return self.Done > '0';
   
end function;

procedure process_event_000 (self :  inout  register_handler_obj; ax_in :  inout  axiStream_slv32_slave; ax_out :  inout  axiStream_slv32_master) is
  variable buff : std_logic_vector(32 -1 downto 0) := std_logic_vector_ctr(0, 32); 
 
  begin 
 self.Done := '0';
  
  if (( isReceivingData_0(self => ax_in) and ready_to_send_0(self => ax_out)) ) then 
  get_value_00_rshift(self => ax_in, rhs => buff);
  deserialize_000(self => self.reg, buff => buff, counter => self.counter);
  self.counter := self.counter + 1;
  
  if (to_bool(self.reg.isComplete) ) then 
  send_data_00(self => ax_out, dataIn => 291);
  
  else
  send_data_00(self => ax_out, dataIn => 1193046);
  
  end if;
  
  if (to_bool(IsEndOfStream_0(self => ax_in)) ) then 
  self.Done := '1';
  
  end if;
  
  end if;
   
end procedure;

------- End Psuedo Class register_handler_obj -------------------------
  -------------------------------------------------------------------------


end register_handler_obj_pack;

