-- XGEN: Autogenerated File

library IEEE;
library work;
use IEEE.numeric_std.all;
use IEEE.std_logic_1164.all;
use ieee.std_logic_unsigned.all;
use work.HDPython_core.all;
use work.axisStream_slv32.all;
use work.reg_handle_pack.all;
use work.v_symbol_pack.all;


entity cmd_tb is 
end entity;



architecture rtl of cmd_tb is

--------------------------cmd_tb-----------------
  signal counter : slv32 := std_logic_vector_ctr(0, 32); 
--------------------------clkgen-----------------
  signal clkgen_clk : std_logic := std_logic_ctr(0, 1); 
-------------------------- end clkgen-----------------
--------------------------cmd-----------------
  signal   cmd_Ax_data_out_s2m : axiStream_slv32_s2m := axiStream_slv32_s2m_ctr;
  signal   cmd_Ax_data_out_m2s : axiStream_slv32_m2s := axiStream_slv32_m2s_ctr;
  signal   cmd_Ax_in_s2m : axiStream_slv32_s2m := axiStream_slv32_s2m_ctr;
  signal   cmd_Ax_in_m2s : axiStream_slv32_m2s := axiStream_slv32_m2s_ctr;
-------------------------- end cmd-----------------
-------------------------- end cmd_tb-----------------

begin
  -- begin architecture
  
-----------------------------------
proc : process(clkgen_clk, cmd_Ax_in_s2m) is
    variable   ax_in : axiStream_slv32_master := axiStream_slv32_master_ctr;
  
  begin
        pull( clk  =>  clkgen_clk, self  =>  ax_in, tx => cmd_Ax_in_s2m);
  
  if rising_edge(clkgen_clk) then
  cmd_Ax_data_out_s2m.ready <= '1';
    counter <= counter + 1;
    
    if (counter = 10) then 
    send_data_00(self => ax_in, dataIn => 305419896);
    
    end if;
    
    if (counter > 10) then 
    send_data_01(self => ax_in, dataIn => counter);
    
    end if;
    
    if (counter = 20) then 
    Send_end_Of_Stream_00(self => ax_in);
    
    end if;
    
  end if;
        push( clk  =>  clkgen_clk, self  =>  ax_in, tx => cmd_Ax_in_m2s);
  
  
  end process;
  -- end architecture

  clkgen : entity work.clk_generator port map (
    clk => clkgen_clk
  );
  
  cmd : entity work.command_reader port map (
    Ax_data_out_s2m => cmd_Ax_data_out_s2m,
    Ax_data_out_m2s => cmd_Ax_data_out_m2s,
    Ax_in_s2m => cmd_Ax_in_s2m,
    Ax_in_m2s => cmd_Ax_in_m2s,
    clk => clkgen_clk
  );
  
end architecture;