-- XGEN: Autogenerated File

library IEEE;
library work;
use IEEE.numeric_std.all;
use IEEE.std_logic_1164.all;
use ieee.std_logic_unsigned.all;
use work.HDPython_core.all;
use work.axisStream_slv32.all;
use work.v_symbol_pack.all;


entity test_bench_axi_fifo is 
end entity;



architecture rtl of test_bench_axi_fifo is

--------------------------test_bench_axi_fifo-----------------
  signal maxCount : slv32 := std_logic_vector_ctr(20, 32); 
--------------------------pipe1-----------------
--------------------------pipe1_1_rollingCounter-----------------
  signal   pipe1_1_rollingCounter_Axi_out_s2m : axiStream_slv32_s2m := axiStream_slv32_s2m_ctr;
  signal   pipe1_1_rollingCounter_Axi_out_m2s : axiStream_slv32_m2s := axiStream_slv32_m2s_ctr;
  signal pipe1_1_rollingCounter_MaxCount : slv32 := std_logic_vector_ctr(20, 32); 
-------------------------- end pipe1_1_rollingCounter-----------------
--------------------------pipe1_2_axiFifo-----------------
  signal   pipe1_2_axiFifo_Axi_in_s2m : axiStream_slv32_s2m := axiStream_slv32_s2m_ctr;
  signal   pipe1_2_axiFifo_Axi_in_m2s : axiStream_slv32_m2s := axiStream_slv32_m2s_ctr;
  signal   pipe1_2_axiFifo_Axi_out_s2m : axiStream_slv32_s2m := axiStream_slv32_s2m_ctr;
  signal   pipe1_2_axiFifo_Axi_out_m2s : axiStream_slv32_m2s := axiStream_slv32_m2s_ctr;
-------------------------- end pipe1_2_axiFifo-----------------
--------------------------pipe1_3_axiFifo-----------------
  signal   pipe1_3_axiFifo_Axi_in_s2m : axiStream_slv32_s2m := axiStream_slv32_s2m_ctr;
  signal   pipe1_3_axiFifo_Axi_in_m2s : axiStream_slv32_m2s := axiStream_slv32_m2s_ctr;
  signal   pipe1_3_axiFifo_Axi_out_s2m : axiStream_slv32_s2m := axiStream_slv32_s2m_ctr;
  signal   pipe1_3_axiFifo_Axi_out_m2s : axiStream_slv32_m2s := axiStream_slv32_m2s_ctr;
-------------------------- end pipe1_3_axiFifo-----------------
--------------------------pipe1_4_axiPrint-----------------
  signal   pipe1_4_axiPrint_Axi_in_s2m : axiStream_slv32_s2m := axiStream_slv32_s2m_ctr;
  signal   pipe1_4_axiPrint_Axi_in_m2s : axiStream_slv32_m2s := axiStream_slv32_m2s_ctr;
-------------------------- end pipe1_4_axiPrint-----------------
-------------------------- end pipe1-----------------
--------------------------clkgen-----------------
  signal clkgen_clk : std_logic := std_logic_ctr(0, 1); 
-------------------------- end clkgen-----------------
-------------------------- end test_bench_axi_fifo-----------------

begin

  pipe1_1_rollingCounter : entity work.rollingCounter port map (
    Axi_out_s2m => pipe1_1_rollingCounter_Axi_out_s2m,
    Axi_out_m2s => pipe1_1_rollingCounter_Axi_out_m2s,
    MaxCount => pipe1_1_rollingCounter_MaxCount,
    clk => clkgen_clk
  );
  pipe1_2_axiFifo : entity work.axiFifo port map (
    Axi_in_s2m => pipe1_2_axiFifo_Axi_in_s2m,
    Axi_in_m2s => pipe1_2_axiFifo_Axi_in_m2s,
    Axi_out_s2m => pipe1_2_axiFifo_Axi_out_s2m,
    Axi_out_m2s => pipe1_2_axiFifo_Axi_out_m2s,
    clk => clkgen_clk
  );
  pipe1_3_axiFifo : entity work.axiFifo1 port map (
    Axi_in_s2m => pipe1_3_axiFifo_Axi_in_s2m,
    Axi_in_m2s => pipe1_3_axiFifo_Axi_in_m2s,
    Axi_out_s2m => pipe1_3_axiFifo_Axi_out_s2m,
    Axi_out_m2s => pipe1_3_axiFifo_Axi_out_m2s,
    clk => clkgen_clk
  );
  pipe1_4_axiPrint : entity work.axiPrint port map (
    Axi_in_s2m => pipe1_4_axiPrint_Axi_in_s2m,
    Axi_in_m2s => pipe1_4_axiPrint_Axi_in_m2s,
    clk => clkgen_clk
  );
  
  clkgen : entity work.clk_generator port map (
    clk => clkgen_clk
  );
  pipe1_1_rollingCounter_MaxCount <= maxCount;
  ---------------------------------------------------------------------
--  pipe1_2_axiFifo_Axi_in << pipe1_1_rollingCounter_Axi_out
pipe1_2_axiFifo_Axi_in_m2s <= pipe1_1_rollingCounter_Axi_out_m2s;
pipe1_1_rollingCounter_Axi_out_s2m <= pipe1_2_axiFifo_Axi_in_s2m;
  ---------------------------------------------------------------------
--  pipe1_3_axiFifo_Axi_in << pipe1_2_axiFifo_Axi_out
pipe1_3_axiFifo_Axi_in_m2s <= pipe1_2_axiFifo_Axi_out_m2s;
pipe1_2_axiFifo_Axi_out_s2m <= pipe1_3_axiFifo_Axi_in_s2m;
  ---------------------------------------------------------------------
--  pipe1_4_axiPrint_Axi_in << pipe1_3_axiFifo_Axi_out
pipe1_4_axiPrint_Axi_in_m2s <= pipe1_3_axiFifo_Axi_out_m2s;
pipe1_3_axiFifo_Axi_out_s2m <= pipe1_4_axiPrint_Axi_in_s2m;
  
end architecture;